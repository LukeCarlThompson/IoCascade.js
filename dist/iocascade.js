var iocascade=function(){"use strict";function t(t){t.removeAttribute("data-io"),t.style.transform="translate3d(0, 0, 0)",t.style.transitionDuration="0s",t.offsetHeight;var e=t.getBoundingClientRect().top,r=t.getBoundingClientRect().bottom;t.setAttribute("data-io",""),t.style.transform="",t.style.transitionDuration="";var o=window.innerHeight||document.documentElement.clientHeight;return(e>0||r>0)&&e<o}return function(e){void 0===e&&(e={});var r=e.selector;void 0===r&&(r="[data-io]");var o=e.delay;void 0===o&&(o=100);var i=e.threshold;void 0===i&&(i=0);var n=e.rootMargin;void 0===n&&(n="0px 100px -100px 100px");var a=e.root;void 0===a&&(a=null);var s=e.once;if(void 0===s&&(s=!1),!("IntersectionObserver"in window))return console.log("observeThis.js says intersection Observer is not supported in your browser"),void document.querySelectorAll(r).forEach(function(t){t.removeAttribute("data-io")});var l=!0,c=[],u=function(t){return"child"===t.getAttribute("data-io")},d=function(t){if(t.length>=1&&l){console.log("queue length --\x3e",t.length),l=!1;var e=t.shift(),r=e.getAttribute("data-delay")||o;setTimeout(function(){e.classList.add("observed-in"),l=!0,d(t),console.log("timeout ran")},r)}},g=new IntersectionObserver(function(e,r){for(var o=0;o<e.length;o++){var i=e[o],n=i.target;if(i.isIntersecting&&t(i.target)&&!u(n)){console.log("isIntersecting but isVisible() --\x3e",t(i.target));var a=n.querySelectorAll('[data-io="child"]');a.length?(c.push(n),a.forEach(function(t){c.push(t)}),d(c)):i.isIntersecting&&t(i.target)&&(c.push(n),d(c))}s||i.isIntersecting||t(i.target)||(console.log("entry leaving",i),console.log("isVisible(entry.target)",t(i.target)),console.log("queue --\x3e",c),i.target.classList.remove("observed-in"),u(i.target)?(i.target.removeAttribute("data-io"),i.target.offsetWidth,i.target.setAttribute("data-io","child")):(i.target.removeAttribute("data-io"),i.target.offsetWidth,i.target.setAttribute("data-io","")))}},{root:a,threshold:i,rootMargin:n});Array.prototype.slice.call(document.querySelectorAll(r)).forEach(function(t){return g.observe(t)})}}();