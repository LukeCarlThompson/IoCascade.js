function isVisible(t){t.removeAttribute("data-io"),t.style.transform="translate3d(0, 0, 0)",t.style.transitionDuration="0s",t.offsetHeight;var e=t.getBoundingClientRect().top,i=t.getBoundingClientRect().bottom;t.setAttribute("data-io",""),t.style.transform="",t.style.transitionDuration="";var o=window.innerHeight||document.documentElement.clientHeight;return(e>0||i>0)&&e<o}function ioCascade(t){void 0===t&&(t={});var e=t.selector;void 0===e&&(e="[data-io]");var i=t.delay;void 0===i&&(i=100);var o=t.threshold;void 0===o&&(o=0);var r=t.rootMargin;void 0===r&&(r="0px 100px -100px 100px");var n=t.root;void 0===n&&(n=null);var s=t.once;if(void 0===s&&(s=!1),!("IntersectionObserver"in window))return console.log("observeThis.js says intersection Observer is not supported in your browser"),void document.querySelectorAll(e).forEach(function(t){t.removeAttribute("data-io")});var a=!0,l=[],c=function(t){return"child"===t.getAttribute("data-io")},u=function(t){if(t.length>=1&&a){console.log("queue length --\x3e",t.length),a=!1;var e=t.shift(),o=e.getAttribute("data-delay")||i;setTimeout(function(){e.classList.add("observed-in"),a=!0,u(t),console.log("timeout ran")},o)}},d=new IntersectionObserver(function(t,e){for(var i=0;i<t.length;i++){var o=t[i],r=o.target;if(o.isIntersecting&&isVisible(o.target)&&!c(r)){console.log("isIntersecting but isVisible() --\x3e",isVisible(o.target));var n=r.querySelectorAll('[data-io="child"]');n.length?(l.push(r),n.forEach(function(t){l.push(t)}),u(l)):o.isIntersecting&&isVisible(o.target)&&(l.push(r),u(l))}s||o.isIntersecting||isVisible(o.target)||(console.log("entry leaving",o),console.log("isVisible(entry.target)",isVisible(o.target)),console.log("queue --\x3e",l),o.target.classList.remove("observed-in"),c(o.target)?(o.target.removeAttribute("data-io"),o.target.offsetWidth,o.target.setAttribute("data-io","child")):(o.target.removeAttribute("data-io"),o.target.offsetWidth,o.target.setAttribute("data-io","")))}},{root:n,threshold:o,rootMargin:r});Array.prototype.slice.call(document.querySelectorAll(e)).forEach(function(t){return d.observe(t)})}export default ioCascade;